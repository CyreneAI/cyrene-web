name: Build & Deploy to Prod

on:
  push:
    branches:
      - prod  # Runs only when code is pushed to the `prod` branch

jobs:
  # 1Ô∏è‚É£ Build & Push Docker Image to GHCR
  build-and-push:
    name: Build & Push to GHCR
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write  # Required to push to GHCR

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry (GHCR)
        run: echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ secrets.GHCR_USERNAME }} --password-stdin

      - name: Build Docker Image
        env:
            PROD_ENV_FILE: ${{ secrets.PROD_ENV_FILE }}
        run: |
          echo "üîß Building Docker image for production..."
          echo "$PROD_ENV_FILE" > .env
          export CURRENT_BRANCH=${GITHUB_REF#refs/heads/}
          export TAG=$([[ $CURRENT_BRANCH == $(basename ${{ github.ref }}) ]] && echo $CURRENT_BRANCH || echo "latest")
          echo $TAG
          export GITHUB_REF_IMAGE=ghcr.io/$GITHUB_REPOSITORY:$GITHUB_SHA
          export GITHUB_BRANCH_IMAGE=ghcr.io/$GITHUB_REPOSITORY:$TAG
          export GITHUB_REF_IMAGE=$(echo $GITHUB_REF_IMAGE | tr '[:upper:]' '[:lower:]')
          echo $GITHUB_BRANCH_IMAGE , $GITHUB_REF_IMAGE, $GITHUB_SHA
          echo "Building Docker Image"
          export GITHUB_BRANCH_IMAGE=$(echo $GITHUB_BRANCH_IMAGE | tr '[:upper:]' '[:lower:]')
          echo docker build --build-arg version=$GITHUB_SHA -t $GITHUB_REF_IMAGE -t $GITHUB_BRANCH_IMAGE
          docker build --build-arg version=$GITHUB_SHA -t $GITHUB_REF_IMAGE -t $GITHUB_BRANCH_IMAGE .
          echo "Pushing Image to GitHub Container Registry"
          docker push $GITHUB_REF_IMAGE
          docker push $GITHUB_BRANCH_IMAGE
          rm -rf .env

  # 2Ô∏è‚É£ Deploy to Production Server via SSH
  deploy:
    name: Deploy to Production
    needs: build-and-push  # Ensures deployment runs only after a successful build & push
    runs-on: ubuntu-latest

    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.PROD_REMOTE_SERVER_ADDRESS }}
          username: ${{ secrets.PROD_SERVER_USERNAME }}
          key: ${{ secrets.PROD_REMOTE_SERVER_KEY }}
          port: ${{ secrets.PROD_SSH_PORT }}
          script: |
            echo "üìÇ Navigating to home directory..."
            cd ~

            echo "üîë Logging in to GitHub Container Registry (GHCR)..."
            echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ secrets.GHCR_USERNAME }} --password-stdin

            echo "üöÄ Pulling the latest production image..."
            docker pull ghcr.io/netsepio/cyrene-web:prod

            echo "üõë Stopping and removing existing container (if running)..."
            docker stop cyreneai || true
            docker rm cyreneai || true

            echo "üßπ Removing old images to free up space..."
            docker system prune -f

            # echo "üìÑ Creating environment file..."
            # cat <<EOF > .env
            # API_BASE_URL=${{ secrets.API_BASE_URL }}
            # MESSAGE_API_URL=${{ secrets.MESSAGE_API_URL }}
            # CYRENE_AI_ID=${{ secrets.CYRENE_AI_ID }}
            # TTS_API_URL=${{ secrets.TTS_API_URL }}
            # MODEL_PROVIDER=${{ secrets.MODEL_PROVIDER }}
            # OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            # NEXT_PUBLIC_PROJECT_ID=${{ secrets.NEXT_PUBLIC_PROJECT_ID }}
            # NEXT_PUBLIC_HELIUS_API_KEY=${{ secrets.NEXT_PUBLIC_HELIUS_API_KEY }}
            # NEXT_PUBLIC_SOLANA_RPC_URL=${{ secrets.NEXT_PUBLIC_SOLANA_RPC_URL }}
            # NEXT_PUBLIC_ALCHEMY_API_KEY=${{ secrets.NEXT_PUBLIC_ALCHEMY_API_KEY }}
            # NEXT_PUBLIC_TREASURY_ADDRESS=${{ secrets.NEXT_PUBLIC_TREASURY_ADDRESS }}
            # NEXT_PUBLIC_ADMIN_ADDRESS_1=${{ secrets.NEXT_PUBLIC_ADMIN_ADDRESS_1 }}
            # NEXT_PUBLIC_ADMIN_ADDRESS_2=${{ secrets.NEXT_PUBLIC_ADMIN_ADDRESS_2 }}

            EOF

            echo "üê≥ Running the new container..."
            docker run --name cyreneai --restart=always -p 9080:3000 -d ghcr.io/netsepio/cyrene-web:prod

            echo "‚úÖ Deployment complete!"
